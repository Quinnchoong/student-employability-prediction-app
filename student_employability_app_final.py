# -*- coding: utf-8 -*-
"""student_employability_app_final.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18-3dqWEVtZ9vWPIW7UxmFxQEr8itV66I
"""

# advanced_employability_app_final.py

# File: streamlit_app.py

import streamlit as st
import pandas as pd
import joblib
import numpy as np

# --- Configuration ---
st.set_page_config(page_title="Student Employability Predictor ‚Äî GUI Features", layout="centered")

# --- Load Model and Scaler ---
try:
    model = joblib.load('employability_predictor.pkl')
    scaler = joblib.load('scaler.pkl')
    feature_columns = [
        'GENDER', 'GENERAL_APPEARANCE', 'GENERAL_POINT_AVERAGE',
        'MANNER_OF_SPEAKING', 'PHYSICAL_CONDITION', 'MENTAL_ALERTNESS',
        'SELF-CONFIDENCE', 'ABILITY_TO_PRESENT_IDEAS', 'COMMUNICATION_SKILLS',
        'STUDENT_PERFORMANCE_RATING', 'NO_SKILLS', 'Year_of_Graduate'
    ]
    st.success("Model and Scaler loaded successfully!")
except FileNotFoundError:
    st.error("""
        Error: Model or scaler file not found.
        Please ensure 'employability_predictor.pkl' and 'scaler.pkl' are in the same directory.
    """)
    st.stop()

st.title("üéì Student Employability Prediction System")
st.markdown("""
    This system implements the **best SVM model** from the research (Casuat et al., 2020) as described in *Section 3.4 System Graphical User Interface*. Below you can experience the **3.4.1 User‚Äôs Account Registration**, **3.4.2 Uploading & Merging Datasets**, and **3.4.3 Student‚Äôs Employability Result**.
""")
st.markdown("---")

# --- Simulated 3.4.1 User's Account Registration ---
st.header("3.4.1 User‚Äôs Account Registration")
st.text_input("Username")
st.text_input("Password", type="password")
st.button("Register Account")

st.markdown("---")

# --- Simulated 3.4.2 Uploading & Merging Datasets ---
st.header("3.4.2 Uploading & Merging Datasets")
st.file_uploader("Upload Mock Job Interview CSV", type=["csv"])
st.file_uploader("Upload OJT Performance CSV", type=["csv"])
if st.button("Merge & Prepare Data"):
    st.info("Datasets uploaded and merged successfully.")

st.markdown("---")

# --- Simulated 3.4.3 Student's Employability Result ---
st.header("3.4.3 Student‚Äôs Employability Result")

col1, col2 = st.columns(2)
input_values = {}

with col1:
    st.subheader("Attributes")
    input_values['GENDER'] = st.radio("Gender", [0,1], format_func=lambda x: "Male" if x==1 else "Female", index=1)
    input_values['GENERAL_APPEARANCE'] = st.slider("General Appearance (1-5)", 1.0, 5.0, 3.0, 0.1)
    input_values['GENERAL_POINT_AVERAGE'] = st.number_input("General Point Average (0.0-4.0)", 0.0, 4.0, 3.0, 0.01)
    input_values['MANNER_OF_SPEAKING'] = st.slider("Manner of Speaking (1-5)", 1.0, 5.0, 3.0, 0.1)
    input_values['PHYSICAL_CONDITION'] = st.slider("Physical Condition (1-5)", 1.0, 5.0, 3.0, 0.1)
    input_values['MENTAL_ALERTNESS'] = st.slider("Mental Alertness (1-5)", 1.0, 5.0, 3.0, 0.1)

with col2:
    st.subheader("Skills & Others")
    input_values['SELF-CONFIDENCE'] = st.slider("Self-Confidence (1-5)", 1.0, 5.0, 3.0, 0.1)
    input_values['ABILITY_TO_PRESENT_IDEAS'] = st.slider("Ability to Present Ideas (1-5)", 1.0, 5.0, 3.0, 0.1)
    input_values['COMMUNICATION_SKILLS'] = st.slider("Communication Skills (1-5)", 1.0, 5.0, 3.0, 0.1)
    input_values['STUDENT_PERFORMANCE_RATING'] = st.slider("Student Performance Rating (1-5)", 1.0, 5.0, 3.0, 0.1)
    input_values['NO_SKILLS'] = st.radio("Has No Skills", [0,1], format_func=lambda x: "No" if x==0 else "Yes", index=0)
    input_values['Year_of_Graduate'] = st.number_input("Year of Graduate", 2000, 2030, 2024, 1)

input_df = pd.DataFrame([input_values])
input_df = input_df[feature_columns]

st.markdown("---")

if st.button("Predict Employability"):
    st.subheader("Prediction Results:")
    scaled_input = scaler.transform(input_df)
    prediction = model.predict(scaled_input)
    prediction_proba = model.predict_proba(scaled_input)

    if prediction[0] == 1:
        st.success("üéâ The student is predicted to be **Employable**!")
        st.balloons()
    else:
        st.warning("‚ö†Ô∏è The student is predicted to be **Less Employable**.")

    st.info(f"**Probability of being Employable:** {prediction_proba[0][1]*100:.2f}%")
    st.info(f"**Probability of being Less Employable:** {prediction_proba[0][0]*100:.2f}%")

    st.markdown("""
        <small><i>Disclaimer: This prediction is based on the trained SVM model and the attributes you provided. Use as guidance only.</i></small>
    """, unsafe_allow_html=True)

st.markdown("---")
st.caption("¬© 2025 CHOONG MUH IN / APU University | Employability Prediction System | Reflects features of 3.4 System GUI from Casuat et al., 2020.")

# --- Footer ---
st.markdown("---")
st.caption("¬© 2025 Your Name / Your University | Graduate Employability Prediction App | For research purposes only.")
